{"version":3,"sources":["FormComponent.js","Name.js","Address.js","Contact.js","Review.js","Submit.js","MultiStepForm.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","label","otherProps","type","Name","setForm","formData","navigation","firstName","lastName","next","className","name","value","onChange","onClick","Address","address","city","state","pincode","previous","Contact","phone","email","Review","go","Submit","steps","id","defaultData","MultiStepForm","useForm","useStep","initialStep","step","props","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eefaef86.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FormComponent = ({ label, ...otherProps }) => (\r\n  <div>\r\n    <label>{label}</label>\r\n    <input type=\"text\" {...otherProps} />\r\n  </div>\r\n);\r\n\r\nexport default FormComponent;","import React from \"react\";\r\n\r\nimport FormComponent from \"./FormComponent\";\r\n\r\nconst Name = ({ setForm, formData, navigation }) => {\r\n  const { firstName, lastName } = formData;\r\n\r\n  const { next } = navigation;\r\n\r\n  return (\r\n    <div className=\"form\">\r\n    <h2>Name</h2>\r\n      <FormComponent\r\n        label=\"First Name\"\r\n        name=\"firstName\"\r\n        value={firstName}\r\n        onChange={setForm}\r\n      />\r\n      <FormComponent\r\n        label=\"Last Name\"\r\n        name=\"lastName\"\r\n        value={lastName}\r\n        onChange={setForm}\r\n      />\r\n      <div>\r\n        <button onClick={next}>Next</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Name;","import React from \"react\";\r\nimport FormComponent from './FormComponent';\r\n\r\nconst Address = ({ setForm, formData, navigation }) => {\r\n  const { address, city, state, pincode } = formData;\r\n\r\n  const { previous, next } = navigation;\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <h2>Address</h2>\r\n        <FormComponent\r\n            label=\"Address\"\r\n            name=\"address\"\r\n            value={address}\r\n            onChange={setForm}\r\n        />\r\n        <FormComponent\r\n            label=\"City\"\r\n            name=\"city\"\r\n            value={city}\r\n            onChange={setForm}\r\n        />\r\n        <FormComponent\r\n            label=\"State\"\r\n            name=\"state\"\r\n            value={state}\r\n            onChange={setForm}\r\n        />\r\n        <FormComponent\r\n            label=\"Pincode\"\r\n            name=\"pincode\"\r\n            value={pincode}\r\n            onChange={setForm}\r\n        />\r\n      <div>\r\n        <button onClick={previous}>Previous</button>\r\n        <button onClick={next}>Next</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Address;","import React from \"react\";\r\nimport FormComponent from './FormComponent';\r\n\r\nconst Contact = ({ setForm, formData, navigation }) => {\r\n  const { phone, email } = formData;\r\n\r\n  const { previous, next } = navigation;\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <h2>Contact Information</h2>\r\n        <FormComponent\r\n            label=\"Phone\"\r\n            name=\"phone\" \r\n            value={phone}\r\n            onChange={setForm}\r\n        />\r\n        <FormComponent\r\n            label=\"E-mail\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={setForm} \r\n        />\r\n      <div>\r\n        <button onClick={previous}>Previous</button>\r\n        <button onClick={next}>Next</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;","import React from \"react\";\r\n\r\nconst Review = ({ setForm, formData, navigation }) => {\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    address,\r\n    city,\r\n    state,\r\n    pincode,\r\n    phone,\r\n    email\r\n  } = formData;\r\n  const { go } = navigation;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Review your data</h2>\r\n      <h4>\r\n        Name\r\n        <button onClick={() => go(\"name\")}>Edit</button>\r\n      </h4>\r\n      <div>\r\n        {\" \"}\r\n        First name: {`${firstName}`},\r\n        <br />\r\n        Last Name: {`${lastName}`}\r\n      </div>\r\n\r\n      <h4>\r\n        Address\r\n        <button onClick={() => go(\"address\")}>Edit</button>\r\n      </h4>\r\n      <div>\r\n        Address: {`${address}`},\r\n        <br />\r\n        City: {`${city}`},\r\n        <br />\r\n        State: {`${state}`},\r\n        <br />\r\n        Pincode: {`${pincode}`}\r\n      </div>\r\n\r\n      <h4>\r\n        Contact\r\n        <button onClick={() => go(\"contact\")}>Edit</button>\r\n      </h4>\r\n      <div>\r\n        Phone: {`${phone}`},\r\n        <br />\r\n        E-mail: {`${email}`}\r\n      </div>\r\n      <div>\r\n        <button onClick={() => go(\"submit\")}>Submit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Review;\r\n","import React from \"react\";\r\nconst Submit = () => {\r\n  return (\r\n    <div>\r\n      <h2>Thank you for submitting. We will be in touch</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Submit;","import React from \"react\";\r\nimport { useForm, useStep } from \"react-hooks-helper\";\r\n\r\nimport Name from \"./Name\";\r\nimport Address from \"./Address\";\r\nimport Contact from \"./Contact\";\r\nimport Review from \"./Review\";\r\nimport Submit from \"./Submit\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst steps = [\r\n  { id: \"name\" },\r\n  { id: \"address\" },\r\n  { id: \"contact\" },\r\n  { id: \"review\" },\r\n  { id: \"submit\" }\r\n];\r\n\r\nconst defaultData = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  address: \"\",\r\n  city: \"\",\r\n  state: \"\",\r\n  pincode: \"\",\r\n  email: \"\",\r\n  phone: \"\"\r\n};\r\n\r\nconst MultiStepForm = () => {\r\n  const [formData, setForm] = useForm(defaultData);\r\n  const { step, navigation } = useStep({ initialStep: 0, steps });\r\n  const { id } = step;\r\n\r\n  const props = { formData, setForm, navigation };\r\n\r\n  switch (id) {\r\n    case \"name\":\r\n      return <Name {...props} />;\r\n    case \"address\":\r\n      return <Address {...props} />;\r\n    case \"contact\":\r\n      return <Contact {...props} />;\r\n    case \"review\":\r\n      return <Review {...props} />;\r\n    case \"submit\":\r\n      return <Submit {...props} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default MultiStepForm;","import React from 'react';\nimport './App.css';\nimport MultiStepForm from './MultiStepForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MultiStepForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}